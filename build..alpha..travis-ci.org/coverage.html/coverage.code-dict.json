{"/home/travis/build/npmtest/node-npmtest-email-templates/test.js":"/* istanbul instrument in package npmtest_email_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-email-templates/lib.npmtest_email_templates.js":"/* istanbul instrument in package npmtest_email_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_email_templates = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_email_templates = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-email-templates/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-email-templates && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_email_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_email_templates\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_email_templates.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_email_templates.rollup.js'] =\n            local.assetsDict['/assets.npmtest_email_templates.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_email_templates.__dirname +\n                    '/lib.npmtest_email_templates.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-email-templates/node_modules/email-templates/lib/main.js":"'use strict';\n\nvar _require = require('./util');\n\nvar ensureDirectory = _require.ensureDirectory;\n\nvar isFunction = require('lodash/isFunction');\nvar EmailTemplate = require('./email-template').default;\nvar debug = require('debug')('email-templates:creator');\n\nvar _require2 = require('path');\n\nvar basename = _require2.basename;\n\n\nfunction exportable(templateDirectory, options, done) {\n  if (isFunction(options)) {\n    done = options;\n    options = {};\n  }\n  if (!templateDirectory) {\n    return done(new Error('templateDirectory is undefined'));\n  }\n\n  return ensureDirectory(templateDirectory, function (err) {\n    if (err) return done(err);\n    debug('Creating Email Templates in %s', basename(templateDirectory));\n    return done(null, template(templateDirectory, options));\n  });\n}\n\nfunction template(templateDirectory, options) {\n  return function _template(directory, locals, callback) {\n    if (isFunction(locals)) {\n      callback = locals;\n      locals = {};\n    }\n    if (directory == null) {\n      return callback(new Error('templateName was not defined'));\n    }\n\n    var et = new EmailTemplate(templateDirectory + '/' + directory, options);\n    if (locals === true) {\n      return callback(null, function (locals, dir, next) {\n        et.render(locals, function (err, result) {\n          result = result || {};\n          next(err, result.html, result.text, result.subject);\n        });\n      });\n    }\n\n    et.render(locals, function (err, result) {\n      result = result || {};\n      callback(err, result.html, result.text, result.subject);\n    });\n  };\n}\n\nexportable.EmailTemplate = EmailTemplate;\nexportable.requires = require('consolidate').requires;\nmodule.exports = exportable;","/home/travis/build/npmtest/node-npmtest-email-templates/node_modules/email-templates/lib/util.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureDirectory = ensureDirectory;\nexports.resolveTPLFolder = resolveTPLFolder;\nexports.getRootTemplateFolder = getRootTemplateFolder;\nexports.getLocalizedETF = getLocalizedETF;\nexports.readContents = readContents;\nexports.renderFile = renderFile;\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _fs = require('fs');\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _templateManager = require('./template-manager');\n\nvar _path = require('path');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar readFileP = _bluebird2.default.promisify(_fs.readFile);\nvar globP = _bluebird2.default.promisify(_glob2.default);\n\nfunction ensureDirectory(path, callback) {\n  return new _bluebird2.default(function (resolve, reject) {\n    (0, _fs.stat)(path, function (err, stat) {\n      if (err) return reject(err);\n      if (!stat.isDirectory()) return reject();\n      resolve();\n    });\n  }).nodeify(callback);\n}\n\n/**\n * Return the localized email tempalte folder or default email template folder\n *\n * @param  {String}   locale locale or null for get email without locale\n * @param  {Function} cb     callback how run with: error, folder\n * @return {Object} promisse\n */\nfunction resolveTPLFolder(path, locale, callback) {\n  return new _bluebird2.default(function (resolve, reject) {\n    getLocalizedETF(path, locale, function (err, tpl) {\n      if (err) return reject(err);\n      if (tpl) return resolve(tpl);\n\n      getRootTemplateFolder(path, function (err, tpl) {\n        if (err) return reject(err);\n        resolve(tpl);\n      });\n    });\n  }).nodeify(callback);\n}\n\n/**\n * Get email template folder, this is the default folder with out localizations\n *\n * @param  {Function} done callback run with error,folder\n */\nfunction getRootTemplateFolder(templatePath, done) {\n  (0, _fs.stat)(templatePath, function afterCheckIfFolderExists(err) {\n    if (err) return done(err);\n    done(null, templatePath);\n  });\n}\n\n/**\n * Get localized email template folder\n *\n * @param  {String}   locale\n * @param  {Function} done   callback run with error,folder\n */\nfunction getLocalizedETF(templatePath, locale, done) {\n  if (!locale || locale === 'en-us') return done();\n\n  var p = (0, _path.join)(templatePath, locale);\n  (0, _fs.stat)(p, function afterCheckIfFolderExists(err) {\n    if (err) {\n      if (err.code === 'ENOENT') return done(); // not found\n      return done(err); // unknow error\n    }\n    done(null, p);\n  });\n}\n\nfunction readContents(path, type) {\n  return globP(path + '/*' + type + '.*').then(function (files) {\n    if (!files.length) return null;\n\n    return readFileP(files[0], 'utf8').then(function (content) {\n      if (!content.length) return null;\n      return {\n        filename: files[0],\n        content: content\n      };\n    });\n  });\n}\n\nfunction renderFile(file, options) {\n  if (!file) return _bluebird2.default.resolve(null);\n  return (0, _templateManager.render)(file, options);\n}","/home/travis/build/npmtest/node-npmtest-email-templates/node_modules/email-templates/lib/template-manager.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.render = render;\n\nvar _path = require('path');\n\nvar _consolidate = require('consolidate');\n\nvar _consolidate2 = _interopRequireDefault(_consolidate);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar engineMap = {\n  // HTML Template engines\n  'html': renderDefault,\n  'hbs': _consolidate2.default.handlebars.render,\n  'njk': _consolidate2.default.nunjucks.render,\n  'emblem': renderEmblem,\n  // CSS pre-processors\n  'less': renderLess,\n  'stylus': renderStylus,\n  'styl': renderStyl,\n  'sass': renderSass,\n  'scss': renderSass,\n  // Handle plain CSS also\n  'css': renderDefault,\n  // Handle plain text\n  'txt': renderDefault,\n  // Handle missing extension\n  '': renderDefault\n}; /**\n    * Small utility module for compling HTML templates or pre-processed CSS.\n    *\n    * @author: [@jasonsims]('https://github.com/jasonsims')\n    */\n\nfunction render(file) {\n  var locals = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n  var callback = arguments[2];\n  var filename = file.filename;\n  var content = file.content;\n\n\n  return new _bluebird2.default(function (resolve, reject) {\n    if (!content) return reject('No content in template');\n    if (!filename) return reject('Filename is null');\n    var engine = (0, _path.extname)(filename).slice(1);\n\n    locals.filename = filename;\n    locals.engine = '.' + engine;\n    locals.templatePath = (0, _path.dirname)(filename);\n\n    if (engine.length && _consolidate2.default[engine] !== undefined) {\n      // use consolidate.js if it supports this engine\n      return _consolidate2.default[engine].render(content, locals, function (err, rendered) {\n        if (err) return reject(err);\n        resolve(rendered);\n      });\n    } else {\n      // or use the function defined in the engineMap\n      var fn = engineMap[engine];\n      return resolve(fn(content, locals));\n    }\n    return reject('Can\\'t render file with extension ' + engine);\n  }).nodeify(callback);\n}\n\n// Deprecated. This engine is deprecated since v2.0\nfunction renderEmblem(source, locals) {\n  var emblem = require('emblem');\n  var handlebars = require('handlebars');\n  console.warn('Please migrate your templates to other engine. Email Templates will stop supporting emblem on the next version');\n\n  var template = emblem.compile(handlebars, source);\n  return _bluebird2.default.resolve(template(locals));\n}\n\n// CSS pre-processors\nfunction renderLess(source, locals) {\n  var less = require('less');\n  var dir = (0, _path.dirname)(locals.filename);\n  var base = (0, _path.basename)(locals.filename);\n\n  return new _bluebird2.default(function (done, reject) {\n    less.render(source, {\n      paths: [dir],\n      filename: base\n    }, function (err, output) {\n      if (err) return reject(err);\n      done(output.css || output);\n    });\n  });\n}\n\nfunction renderStylus(source, locals) {\n  var stylus = require('stylus');\n\n  // Render stylus synchronously as it does not appear to handle asynchronous\n  // calls properly when an error is generated.\n  var css = stylus.render(source, locals);\n  return _bluebird2.default.resolve(css);\n}\n\nfunction renderStyl(source, locals) {\n  var styl = require('styl');\n\n  var css = styl(source, locals).toString();\n  return _bluebird2.default.resolve(css);\n}\n\nfunction renderSass(source, locals) {\n  var sass = require('node-sass');\n\n  locals.data = source;\n\n  if (locals.includePaths) {\n    locals.includePaths = locals.includePaths.concat([locals.templatePath]);\n  } else {\n    locals.includePaths = [locals.templatePath];\n  }\n\n  return new _bluebird2.default(function (done, reject) {\n    sass.render(locals, function (err, data) {\n      if (err) return reject(err);\n      done(data.css.toString());\n    });\n  });\n}\n// Default wrapper for handling standard CSS and empty source.\nfunction renderDefault(source) {\n  return _bluebird2.default.resolve(source);\n}","/home/travis/build/npmtest/node-npmtest-email-templates/node_modules/email-templates/lib/email-template.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _path = require('path');\n\nvar _juice = require('juice');\n\nvar _juice2 = _interopRequireDefault(_juice);\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _assign = require('lodash/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = (0, _debug2.default)('email-templates:email-template');\n\nvar EmailTemplate = function () {\n  function EmailTemplate(path) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, EmailTemplate);\n\n    this.path = path;\n    this.dirname = (0, _path.basename)(path);\n    this.options = options;\n    debug('Creating Email template for path %s', (0, _path.basename)(path));\n    // localized templates cache\n    this.ltpls = {};\n  }\n\n  _createClass(EmailTemplate, [{\n    key: '_init',\n    value: function _init(locale) {\n      var _this = this;\n\n      if (!locale) locale = 'en-us';\n\n      if (!this.ltpls[locale]) this.ltpls[locale] = { files: {} };\n\n      if (this.ltpls[locale].isInited) {\n        return _bluebird2.default.resolve(); // i18n cache\n      }\n\n      debug('Initializing templates');\n      return (0, _util.resolveTPLFolder)(this.path, locale).then(function (p) {\n        return _this._loadTemplates(p, locale);\n      }).then(function () {\n        _this.ltpls[locale].isInited = true;\n        debug('Finished initializing templates');\n      });\n    }\n  }, {\n    key: '_loadTemplates',\n    value: function _loadTemplates(p, locale) {\n      var _this2 = this;\n\n      return _bluebird2.default.map(['html', 'text', 'style', 'subject'], function (type) {\n        return (0, _util.readContents)(p, type);\n      }).then(function (files) {\n        var _files = _slicedToArray(files, 4);\n\n        var html = _files[0];\n        var text = _files[1];\n        var style = _files[2];\n        var subject = _files[3];\n\n\n        if (!html && !text) {\n          var err = new Error('Neither html nor text template files found or are both empty in path ' + _this2.dirname);\n          err.code = 'ENOENT';\n          throw err;\n        }\n\n        if (html) {\n          debug('Found HTML file %s in %s', (0, _path.basename)(html.filename), _this2.dirname);\n        }\n        _this2.ltpls[locale].files.html = html;\n\n        if (text) {\n          debug('Found text %s file in %s', (0, _path.basename)(text.filename), _this2.dirname);\n        }\n        _this2.ltpls[locale].files.text = text;\n\n        if (style) {\n          debug('Found stylesheet %s in %s', (0, _path.basename)(style.filename), _this2.dirname);\n        }\n        _this2.ltpls[locale].files.style = style;\n\n        if (subject) {\n          debug('Found subject %s in %s', (0, _path.basename)(subject.filename), _this2.dirname);\n        }\n        _this2.ltpls[locale].files.subject = subject;\n\n        debug('Finished loading template');\n      });\n    }\n  }, {\n    key: 'renderText',\n    value: function renderText(locals, locale, callback) {\n      var _this3 = this;\n\n      if (!locale || !callback && (0, _isFunction2.default)(locale)) {\n        callback = locale;\n        locale = 'en-us';\n      }\n\n      debug('Rendering text');\n      return this._init(locale).then(function () {\n        if (!_this3.ltpls[locale].files.text) return null;\n        return (0, _util.renderFile)(_this3.ltpls[locale].files.text, locals);\n      }).tap(function () {\n        return debug('Finished rendering text');\n      }).nodeify(callback);\n    }\n  }, {\n    key: 'renderSubject',\n    value: function renderSubject(locals, locale, callback) {\n      var _this4 = this;\n\n      if (!locale || !callback && (0, _isFunction2.default)(locale)) {\n        callback = locale; // locale is optional\n        locale = 'en-us';\n      }\n\n      debug('Rendering subject');\n      return this._init(locale).then(function () {\n        if (!_this4.ltpls[locale].files.subject) return null;\n        return (0, _util.renderFile)(_this4.ltpls[locale].files.subject, locals);\n      }).tap(function () {\n        return debug('Finished rendering subject');\n      }).nodeify(callback);\n    }\n  }, {\n    key: 'renderHtml',\n    value: function renderHtml(locals, locale, callback) {\n      var _this5 = this;\n\n      if (!locale || !callback && (0, _isFunction2.default)(locale)) {\n        callback = locale; // locale is optional\n        locale = 'en-us';\n      }\n\n      debug('Rendering HTML');\n      return this._init(locale).then(function () {\n        return _bluebird2.default.all([(0, _util.renderFile)(_this5.ltpls[locale].files.html, locals), _this5._renderStyle(locals, locale)]);\n      }).then(function (results) {\n        var _results = _slicedToArray(results, 2);\n\n        var html = _results[0];\n        var style = _results[1];\n\n        if (!style) return html;\n        if (_this5.options.disableJuice) return html;\n        if (_this5.options.juiceOptions) {\n          debug('Using juice options ', _this5.options.juiceOptions);\n        }\n        return _juice2.default.inlineContent(html, style, _this5.options.juiceOptions || {});\n      }).tap(function () {\n        return debug('Finished rendering HTML');\n      }).nodeify(callback);\n    }\n  }, {\n    key: 'render',\n    value: function render(locals, locale, callback) {\n      if ((0, _isFunction2.default)(locals)) {\n        callback = locals;\n        locals = {};\n      } else if (locals) {\n        locals = (0, _assign2.default)({}, locals);\n      }\n\n      if (!callback && (0, _isFunction2.default)(locale)) {\n        callback = locale; // locale is optional\n        locale = 'en-us';\n      }\n\n      debug('Rendering template with locals %j', locals);\n\n      return _bluebird2.default.all([this.renderHtml(locals, locale), this.renderText(locals, locale), this.renderSubject(locals, locale)]).then(function (rendered) {\n        var _rendered = _slicedToArray(rendered, 3);\n\n        var html = _rendered[0];\n        var text = _rendered[1];\n        var subject = _rendered[2];\n\n        return {\n          html: html, text: text, subject: subject\n        };\n      }).nodeify(callback);\n    }\n  }, {\n    key: '_renderStyle',\n    value: function _renderStyle(locals, locale) {\n      var _this6 = this;\n\n      return new _bluebird2.default(function (resolve) {\n        // cached\n        if (_this6.ltpls[locale].style !== undefined) {\n          return resolve(_this6.ltpls[locale].style);\n        }\n\n        // no style\n        if (!_this6.ltpls[locale].files.style) return resolve(null);\n\n        if (_this6.options.sassOptions) {\n          locals = (0, _assign2.default)({}, locals, _this6.options.sassOptions);\n        }\n\n        debug('Rendering stylesheet');\n\n        resolve((0, _util.renderFile)(_this6.ltpls[locale].files.style, locals).then(function (style) {\n          _this6.ltpls[locale].style = style;\n          debug('Finished rendering stylesheet');\n          return style;\n        }));\n      });\n    }\n  }]);\n\n  return EmailTemplate;\n}();\n\nexports.default = EmailTemplate;","/home/travis/build/npmtest/node-npmtest-email-templates/node_modules/email-templates/src/main.js":"const {ensureDirectory} = require('./util')\nconst isFunction = require('lodash/isFunction')\nconst EmailTemplate = require('./email-template').default\nconst debug = require('debug')('email-templates:creator')\nconst {basename} = require('path')\n\nfunction exportable (templateDirectory, options, done) {\n  if (isFunction(options)) {\n    done = options\n    options = {}\n  }\n  if (!templateDirectory) {\n    return done(new Error('templateDirectory is undefined'))\n  }\n\n  return ensureDirectory(templateDirectory, function (err) {\n    if (err) return done(err)\n    debug('Creating Email Templates in %s', basename(templateDirectory))\n    return done(null, template(templateDirectory, options))\n  })\n}\n\nfunction template (templateDirectory, options) {\n  return function _template (directory, locals, callback) {\n    if (isFunction(locals)) {\n      callback = locals\n      locals = {}\n    }\n    if (directory == null) {\n      return callback(new Error('templateName was not defined'))\n    }\n\n    var et = new EmailTemplate(`${templateDirectory}/${directory}`, options)\n    if (locals === true) {\n      return callback(null, function (locals, dir, next) {\n        et.render(locals, function (err, result) {\n          result = result || {}\n          next(err, result.html, result.text, result.subject)\n        })\n      })\n    }\n\n    et.render(locals, function (err, result) {\n      result = result || {}\n      callback(err, result.html, result.text, result.subject)\n    })\n  }\n}\n\nexportable.EmailTemplate = EmailTemplate\nexportable.requires = require('consolidate').requires\nmodule.exports = exportable\n","/home/travis/build/npmtest/node-npmtest-email-templates/node_modules/email-templates/src/util.js":"import P from 'bluebird'\nimport {readFile, stat} from 'fs'\nimport glob from 'glob'\nimport {render} from './template-manager'\nimport {join} from 'path'\n\nconst readFileP = P.promisify(readFile)\nconst globP = P.promisify(glob)\n\nexport function ensureDirectory (path, callback) {\n  return new P((resolve, reject) => {\n    stat(path, (err, stat) => {\n      if (err) return reject(err)\n      if (!stat.isDirectory()) return reject()\n      resolve()\n    })\n  })\n  .nodeify(callback)\n}\n\n/**\n * Return the localized email tempalte folder or default email template folder\n *\n * @param  {String}   locale locale or null for get email without locale\n * @param  {Function} cb     callback how run with: error, folder\n * @return {Object} promisse\n */\nexport function resolveTPLFolder (path, locale, callback) {\n  return new P((resolve, reject) => {\n    getLocalizedETF(path, locale, function (err, tpl) {\n      if (err) return reject(err)\n      if (tpl) return resolve(tpl)\n\n      getRootTemplateFolder(path, function (err, tpl) {\n        if (err) return reject(err)\n        resolve(tpl)\n      })\n    })\n  })\n  .nodeify(callback)\n}\n\n/**\n * Get email template folder, this is the default folder with out localizations\n *\n * @param  {Function} done callback run with error,folder\n */\nexport function getRootTemplateFolder (templatePath, done) {\n  stat(templatePath, function afterCheckIfFolderExists (err) {\n    if (err) return done(err)\n    done(null, templatePath)\n  })\n}\n\n/**\n * Get localized email template folder\n *\n * @param  {String}   locale\n * @param  {Function} done   callback run with error,folder\n */\nexport function getLocalizedETF (templatePath, locale, done) {\n  if (!locale || (locale === 'en-us')) return done()\n\n  var p = join(templatePath, locale)\n  stat(p, function afterCheckIfFolderExists (err) {\n    if (err) {\n      if (err.code === 'ENOENT') return done() // not found\n      return done(err) // unknow error\n    }\n    done(null, p)\n  })\n}\n\nexport function readContents (path, type) {\n  return globP(`${path}/*${type}.*`)\n  .then((files) => {\n    if (!files.length) return null\n\n    return readFileP(files[0], 'utf8')\n    .then((content) => {\n      if (!content.length) return null\n      return {\n        filename: files[0],\n        content: content\n      }\n    })\n  })\n}\n\nexport function renderFile (file, options) {\n  if (!file) return P.resolve(null)\n  return render(file, options)\n}\n\n"}